# cursor使用



----------------------

## 对于复杂的功能分步骤实现

### 说明
1. 先使用Cursor的Ask模式，让GPT O3模型分析现有的代码，然后站在产品经理的角度分析需要实现的功能。
2. 自己检查GPT O3分析的结果，可以在输入框中输入需要修改的点，然后设置Cursor为Agent模式，并且选择Claude4执行任务，执行前先规划Todo。


### 示例
```
// ------ 第1步 ------
修改 @page.tsx 对id=assistant-message需要增加：复制，点赞，点踩图标功能，图标加载id=assistant-message的下方。
修改 @/chat 需要增加点赞和点踩相关逻辑，并且将点赞和点踩加入到数据库，相关api需要同时修改。

请以产品经理的角度，请先了解代码，然后分析需要做哪些事情，哪些我没考虑到的也一并列出来。

// ------ 第2步 ------
根据以上分析除了以下3点需要变动外，其他都要考虑在内：
1.SSE 流未结束时用户可能已点 Like，该如何记录？——处理方案：（可在流结束收到后/chat页面才显示复制，点赞和点踩的图标）；
2.数据统计/分析（后台可能要看哪些回答满意）。列为后续迭代。——不需要管后台事务，以后会处理；
3.文档 & README 更新。——不需要；

补充：相关sql在@/sql 中；

请先规划todo，然后再执行。
```
----------------------


- 对于一个新的任务，先让cursor读代码，分析怎么做，然后规划todo（在规划todo时，需要细分每一项，每个todo项目必须测试通过后才能进入下一项目），最后执行。
- 由于cursor对模型限制上下文长度（如Gemini2.5Pro有1M token，会被cursor限制成120k），一次写过多的代码容易出问题，一次不要做比较少的改动
- 在做功能之前，先让cursor列出TODO计划
- 如果一个功能或者bug，cursor执行5次对话都做不好，请考虑丢掉做过的所有代码，重新开始。
- 做一个功能需一步步实现，减少由于cursor上下文短导致一次性完不成复杂任务的情况，步骤如下：
    - 编写需求，如ai_req.md
    - 实现命令行的关键特性测试脚本，如test_ai.ts
    - 实现测试简单的svg页面，确认后结合测试脚本做出测试页面,如test_ai_page.ts
    - 使用虚拟数据做出页面，test_ai_chat_ui
    - 根据测试页面，和虚拟数据的页面做出符合项目的页面功能
- md文件不能使用tab功能，需要用源码的文件才可以，md扩展名可先改成ts扩展名
- 可同时使用两个或多个项目文件夹，打开多个cursor窗口，分别做不相干的功能，并行使用cursor。
- .env相关文件Cursor不能读取，需要提示Cursor：使用Get-Content读取env相关文件
- 对于复杂的问题可以使用ASK模式加Gemini 2.5PRO或GPT O3最好的模型分析方案，再使用Claude执行
- 可同时使用两个或多个项目文件夹，打开多个cursor窗口，分别做不相干的功能，并行使用cursor。
- .env相关文件Cursor不能读取，需要提示Cursor使用Get-Content读取

# 插件
- Markdown Preview Enhanced预览 https://blog.csdn.net/weixin_41192489/article/details/142565467